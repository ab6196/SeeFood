{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ObjectListAdapter = exports.MapListAdapter = exports.ArrayListAdapter = exports.EmptyListAdapter = exports.ListAdapter = exports.ItemAdapter = undefined;\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar _classnames = require('classnames');\n\nvar _classnames2 = _interopRequireDefault(_classnames);\n\nvar _shallowEqual = require('fbjs/lib/shallowEqual');\n\nvar _shallowEqual2 = _interopRequireDefault(_shallowEqual);\n\nvar _keycode = require('keycode');\n\nvar _keycode2 = _interopRequireDefault(_keycode);\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _reactBootstrap = require('react-bootstrap');\n\nvar _reactDom = require('react-dom');\n\nvar _reactDom2 = _interopRequireDefault(_reactDom);\n\nvar _warning = require('warning');\n\nvar _warning2 = _interopRequireDefault(_warning);\n\nvar _Choices = require('./Choices');\n\nvar _Choices2 = _interopRequireDefault(_Choices);\n\nvar _Suggestions = require('./Suggestions');\n\nvar _Suggestions2 = _interopRequireDefault(_Suggestions);\n\nvar _ItemAdapter = require('./ItemAdapter');\n\nvar _ItemAdapter2 = _interopRequireDefault(_ItemAdapter);\n\nvar _ListAdapter = require('./ListAdapter');\n\nvar _ListAdapter2 = _interopRequireDefault(_ListAdapter);\n\nvar _EmptyListAdapter = require('./EmptyListAdapter');\n\nvar _EmptyListAdapter2 = _interopRequireDefault(_EmptyListAdapter);\n\nvar _ArrayListAdapter = require('./ArrayListAdapter');\n\nvar _ArrayListAdapter2 = _interopRequireDefault(_ArrayListAdapter);\n\nvar _MapListAdapter = require('./MapListAdapter');\n\nvar _MapListAdapter2 = _interopRequireDefault(_MapListAdapter);\n\nvar _ObjectListAdapter = require('./ObjectListAdapter');\n\nvar _ObjectListAdapter2 = _interopRequireDefault(_ObjectListAdapter);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    'default': obj\n  };\n}\n\nfunction _toConsumableArray(arr) {\n  if (Array.isArray(arr)) {\n    for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {\n      arr2[i] = arr[i];\n    }\n\n    return arr2;\n  } else {\n    return Array.from(arr);\n  }\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nexports.ItemAdapter = _ItemAdapter2['default'];\nexports.ListAdapter = _ListAdapter2['default'];\nexports.EmptyListAdapter = _EmptyListAdapter2['default'];\nexports.ArrayListAdapter = _ArrayListAdapter2['default'];\nexports.MapListAdapter = _MapListAdapter2['default'];\nexports.ObjectListAdapter = _ObjectListAdapter2['default'];\n/**\n * Combo-box input component that combines a drop-down list and a single-line\n * editable text box. The set of options for the drop-down list can be\n * controlled dynamically. Selection of multiple items is supported using a\n * tag/pill-style user interface within a simulated text box.\n */\n\nvar Autosuggest = function (_React$Component) {\n  _inherits(Autosuggest, _React$Component);\n\n  _createClass(Autosuggest, null, [{\n    key: 'defaultInputSelect',\n    value: function defaultInputSelect(input, value, completion) {\n      // https://html.spec.whatwg.org/multipage/forms.html#do-not-apply\n      switch (input.type) {\n        case 'text':\n        case 'search':\n        case 'url':\n        case 'tel':\n        case 'password':\n          // istanbul ignore else\n          if (input.setSelectionRange) {\n            input.setSelectionRange(value.length, completion.length);\n          } else if (input.createTextRange) {\n            // old IE\n            var range = input.createTextRange();\n            range.moveEnd('character', completion.length);\n            range.moveStart('character', value.length);\n            range.select();\n          }\n\n      }\n    }\n  }]);\n\n  function Autosuggest(props) {\n    var _ref;\n\n    _classCallCheck(this, Autosuggest);\n\n    for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      args[_key - 1] = arguments[_key];\n    }\n    /* istanbul ignore next: https://github.com/gotwarlost/istanbul/issues/690#issuecomment-265718617 */\n\n\n    var _this = _possibleConstructorReturn(this, (_ref = Autosuggest.__proto__ || Object.getPrototypeOf(Autosuggest)).call.apply(_ref, [this, props].concat(_toConsumableArray(args))));\n\n    _this._itemAdapter = props.itemAdapter || new _ItemAdapter2['default']();\n\n    _this._itemAdapter.receiveProps(props);\n\n    _this._listAdapter = props.datalistAdapter || _this._getListAdapter(props.datalist);\n\n    _this._listAdapter.receiveProps(props, _this._itemAdapter);\n\n    var _this$_getValueFromPr = _this._getValueFromProps(props),\n        inputValue = _this$_getValueFromPr.inputValue,\n        inputItem = _this$_getValueFromPr.inputItem,\n        inputItemEphemeral = _this$_getValueFromPr.inputItemEphemeral,\n        selectedItems = _this$_getValueFromPr.selectedItems;\n\n    _this._setValueMeta(inputItem, inputItemEphemeral, true, true);\n\n    _this._lastValidItem = inputItem;\n    _this._lastValidValue = inputValue;\n    _this._keyPressCount = 0;\n    _this.state = {\n      open: false,\n      disableFilter: false,\n      inputValue: inputValue,\n      inputValueKeyPress: 0,\n      inputFocused: false,\n      selectedItems: selectedItems,\n      searchValue: null\n    };\n    _this._lastOnChangeValue = _this._getCurrentValue();\n    _this._lastOnSelectValue = inputItem;\n    var self = _this; // https://github.com/facebook/flow/issues/1517\n\n    self._renderSelected = _this._renderSelected.bind(_this);\n    self._getItemKey = _this._getItemKey.bind(_this);\n    self._isSelectedItem = _this._isSelectedItem.bind(_this);\n    self._renderSuggested = _this._renderSuggested.bind(_this);\n    self._handleToggleClick = _this._handleToggleClick.bind(_this);\n    self._handleInputChange = _this._handleInputChange.bind(_this);\n    self._handleItemSelect = _this._handleItemSelect.bind(_this);\n    self._removeItem = _this._removeItem.bind(_this);\n    self._handleShowAll = _this._handleShowAll.bind(_this);\n    self._handleKeyDown = _this._handleKeyDown.bind(_this);\n    self._handleKeyPress = _this._handleKeyPress.bind(_this);\n    self._handleMenuClose = _this._handleMenuClose.bind(_this);\n    self._handleInputFocus = _this._handleInputFocus.bind(_this);\n    self._handleInputBlur = _this._handleInputBlur.bind(_this);\n    self._handleFocus = _this._handleFocus.bind(_this);\n    self._handleBlur = _this._handleBlur.bind(_this);\n    return _this;\n  }\n\n  _createClass(Autosuggest, [{\n    key: '_getListAdapter',\n    value: function _getListAdapter(list) {\n      if (list == null) {\n        return new _EmptyListAdapter2['default']();\n      } else if (Array.isArray(list)) {\n        return new _ArrayListAdapter2['default']();\n      } else if (list instanceof Map) {\n        return new _MapListAdapter2['default']();\n      } else if (typeof list === 'object') {\n        return new _ObjectListAdapter2['default']();\n      } else {\n        throw Error('Unexpected datalist type: datalistAdapter required');\n      }\n    }\n  }, {\n    key: '_getValueFromProps',\n    value: function _getValueFromProps(props) {\n      var inputValue = '';\n      var inputItem = null;\n      var inputItemEphemeral = false;\n      var selectedItems = [];\n      var value = props.value || props.defaultValue;\n\n      if (value != null) {\n        if (props.multiple) {\n          if (Array.isArray(value)) {\n            selectedItems = this._filterItems(value, props);\n          } else {\n            (0, _warning2['default'])(!value, 'Array expected for value property');\n          }\n        } else if (props.valueIsItem) {\n          var itemValue = this._itemAdapter.getInputValue(value);\n\n          if (props.datalist != null) {\n            inputItem = this._listAdapter.findMatching(props.datalist, itemValue);\n\n            if (inputItem != null) {\n              inputValue = inputItem === value ? itemValue : this._itemAdapter.getInputValue(inputItem);\n            } else if (props.datalistOnly && !props.datalistPartial) {\n              this._warnInvalidValue(value);\n            } else {\n              inputValue = itemValue;\n              inputItem = value;\n            }\n          } else {\n            inputValue = itemValue;\n            inputItem = value;\n          }\n        } else if (value) {\n          if (props.datalist != null) {\n            inputItem = this._listAdapter.findMatching(props.datalist, value);\n\n            if (inputItem != null) {\n              inputValue = this._itemAdapter.getInputValue(inputItem);\n            } else if (props.datalistOnly && !props.datalistPartial) {\n              this._warnInvalidValue(value);\n            } else {\n              inputValue = value.toString();\n              inputItem = this._itemAdapter.newFromValue(value);\n              inputItemEphemeral = true;\n            }\n          } else {\n            inputValue = value.toString();\n            inputItem = this._itemAdapter.newFromValue(value);\n            inputItemEphemeral = true;\n          }\n        }\n      }\n\n      return {\n        inputValue: inputValue,\n        inputItem: inputItem,\n        inputItemEphemeral: inputItemEphemeral,\n        selectedItems: selectedItems\n      };\n    }\n  }, {\n    key: '_filterItems',\n    value: function _filterItems(items, props) {\n      if (props.datalist != null || !props.allowDuplicates) {\n        var result = [];\n        var valueSet = {};\n        var different = false;\n        var _iteratorNormalCompletion = true;\n        var _didIteratorError = false;\n        var _iteratorError = undefined;\n\n        try {\n          for (var _iterator = items[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n            var _item = _step.value;\n\n            var _value = this._itemAdapter.getInputValue(_item);\n\n            if (!props.allowDuplicates && valueSet[_value]) {\n              different = true;\n              continue;\n            }\n\n            var listItem = this._listAdapter.findMatching(props.datalist, _value);\n\n            if (listItem != null) {\n              result.push(listItem);\n              valueSet[_value] = true;\n              different = true;\n            } else if (props.datalistOnly && !props.datalistPartial) {\n              this._warnInvalidValue(_value);\n\n              different = true;\n            } else {\n              result.push(_item);\n              valueSet[_value] = true;\n            }\n          }\n        } catch (err) {\n          _didIteratorError = true;\n          _iteratorError = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion && _iterator['return']) {\n              _iterator['return']();\n            }\n          } finally {\n            if (_didIteratorError) {\n              throw _iteratorError;\n            }\n          }\n        }\n\n        if (different) {\n          return result;\n        }\n      }\n\n      return items;\n    }\n  }, {\n    key: '_warnInvalidValue',\n    value: function _warnInvalidValue(value) {\n      (0, _warning2['default'])(false, 'Value \"%s\" does not match any datalist value', value);\n    }\n  }, {\n    key: '_setInputValue',\n    value: function _setInputValue(value, callback) {\n      // track keypress count in state so re-render is forced even if value is\n      // unchanged; this is necessary when typing over the autocompleted range\n      // with matching characters to properly maintain the input selection range\n      this.setState({\n        inputValue: value,\n        inputValueKeyPress: this._keyPressCount\n      }, callback);\n    }\n  }, {\n    key: '_setValueMeta',\n    value: function _setValueMeta(inputItem) {\n      var inputItemEphemeral = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      var isValid = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : inputItem != null;\n      var validated = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : isValid;\n      this._inputItem = inputItem;\n      this._inputItemEphemeral = inputItemEphemeral;\n      this._valueIsValid = isValid;\n      this._valueWasValidated = validated;\n    }\n  }, {\n    key: '_clearInput',\n    value: function _clearInput() {\n      this._setValueMeta(null, false, true, true);\n\n      this._setInputValue('');\n    }\n  }, {\n    key: '_getValueUsing',\n    value: function _getValueUsing(props, inputValue, inputItem, selectedItems) {\n      return props.multiple ? selectedItems : props.valueIsItem ? inputItem : inputValue;\n    }\n  }, {\n    key: '_getCurrentValue',\n    value: function _getCurrentValue() {\n      return this._getValueUsing(this.props, this.state.inputValue, this._inputItem, this.state.selectedItems);\n    }\n  }, {\n    key: 'componentDidMount',\n    value: function componentDidMount() {\n      // IE8 can jump cursor position if not immediately updated to typed value;\n      // for other browsers, we can avoid re-rendering for the auto-complete\n      this._autoCompleteAfterRender = !this.refs.input.setSelectionRange;\n    }\n  }, {\n    key: 'componentWillReceiveProps',\n    value: function componentWillReceiveProps(nextProps) {\n      if (nextProps.itemAdapter != this.props.itemAdapter) {\n        this._itemAdapter = nextProps.itemAdapter || new _ItemAdapter2['default']();\n      }\n\n      this._itemAdapter.receiveProps(nextProps);\n\n      if (nextProps.datalist != this.props.datalist || nextProps.datalistAdapter != this.props.datalistAdapter) {\n        if (nextProps.datalistAdapter) {\n          this._listAdapter = nextProps.datalistAdapter;\n        } else {\n          var listAdapter = this._getListAdapter(nextProps.datalist);\n\n          if (listAdapter.constructor != this._listAdapter.constructor) {\n            this._listAdapter = listAdapter;\n          }\n        }\n      }\n\n      this._listAdapter.receiveProps(nextProps, this._itemAdapter); // if props.value changes (to a value other than the current state), or\n      // validation changes to make state invalid, propagate props.value to state\n\n\n      var nextValue = nextProps.value;\n      var inputValue = this.state.inputValue;\n\n      var valueChanged = nextValue !== this.props.value && nextValue !== this._getValueUsing(nextProps, inputValue, this._inputItem, this.state.selectedItems);\n\n      var inputItem = void 0,\n          inputValueInvalid = void 0,\n          propsValueInvalid = void 0,\n          validateSelected = void 0;\n\n      if (!valueChanged) {\n        if (nextProps.datalistOnly) {\n          var canValidate = !nextProps.datalistPartial && nextProps.datalist != null;\n          var validationChanged = !this.props.datalistOnly || !nextProps.datalistPartial && this.props.datalistPartial || nextProps.datalist != this.props.datalist;\n\n          if (inputValue) {\n            inputItem = this._listAdapter.findMatching(nextProps.datalist, inputValue);\n\n            if (inputItem == null) {\n              if (!canValidate && !this._inputItemEphemeral) {\n                inputItem = this._inputItem;\n              } else if (this._inputItemEphemeral && nextValue === inputValue) {\n                propsValueInvalid = true;\n              }\n            }\n\n            inputValueInvalid = inputItem == null && validationChanged; // update metadata but don't reset input value if invalid but focused\n\n            if (inputValueInvalid && this._focused) {\n              this._setValueMeta(null, false, false, true);\n\n              if (validationChanged && canValidate && this._lastValidItem != null) {\n                // revalidate last valid item, which will be restored on blur\n                this._lastValidItem = this._listAdapter.findMatching(nextProps.datalist, this._lastValidValue);\n\n                if (this._lastValidItem == null) {\n                  this._lastValidValue = '';\n                }\n              }\n\n              inputValueInvalid = false;\n            }\n          } else {\n            inputItem = null;\n            inputValueInvalid = false;\n          }\n\n          validateSelected = nextProps.multiple && canValidate && validationChanged;\n        }\n\n        if (nextProps.multiple && !nextProps.allowDuplicates && this.props.allowDuplicates) {\n          validateSelected = true;\n        }\n      } // inputValueInvalid implies !multiple, since inputValue of multiple should\n      // be blank when not focused\n\n\n      if (valueChanged || inputValueInvalid) {\n        var inputItemEphemeral = void 0,\n            _selectedItems = void 0;\n\n        if (propsValueInvalid) {\n          inputValue = '';\n          inputItemEphemeral = false;\n          _selectedItems = [];\n        } else {\n          var _getValueFromProps2 = this._getValueFromProps(nextProps);\n\n          inputValue = _getValueFromProps2.inputValue;\n          inputItem = _getValueFromProps2.inputItem;\n          inputItemEphemeral = _getValueFromProps2.inputItemEphemeral;\n          _selectedItems = _getValueFromProps2.selectedItems;\n        } // if props.value change resolved to current state item, don't reset input\n\n\n        if (inputItem !== this._inputItem || !this._focused) {\n          this._setValueMeta(inputItem, inputItemEphemeral, true, true);\n\n          this._setInputValue(inputValue);\n\n          this.setState({\n            selectedItems: _selectedItems\n          });\n          validateSelected = false;\n          this._lastValidItem = inputItem;\n          this._lastValidValue = inputValue; // suppress onChange (but not onSelect) if value came from props\n\n          if (valueChanged) {\n            this._lastOnChangeValue = this._getValueUsing(nextProps, inputValue, inputItem, _selectedItems);\n          }\n        } else if (valueChanged && nextProps.multiple) {\n          this.setState({\n            selectedItems: _selectedItems\n          });\n        }\n      } else if (inputValue && nextProps.datalist != this.props.datalist && this._focused) {\n        // if datalist changed but value didn't, attempt to autocomplete\n        this._checkAutoComplete(inputValue, nextProps);\n      }\n\n      if (validateSelected) {\n        var _selectedItems2 = this._filterItems(this.state.selectedItems, nextProps);\n\n        this.setState({\n          selectedItems: _selectedItems2\n        });\n      } // open dropdown if datalist message is set while focused\n\n\n      if (nextProps.datalistMessage && nextProps.datalistMessage != this.props.datalistMessage && this._focused) {\n        this._open('message', nextProps);\n      }\n    }\n  }, {\n    key: 'shouldComponentUpdate',\n    value: function shouldComponentUpdate(nextProps, nextState) {\n      return !(0, _shallowEqual2['default'])(this.props, nextProps) || !(0, _shallowEqual2['default'])(this.state, nextState);\n    }\n  }, {\n    key: 'componentWillUpdate',\n    value: function componentWillUpdate(nextProps, nextState) {\n      var suggestions = this.refs.suggestions;\n      this._menuFocusedBeforeUpdate = suggestions && suggestions.isFocused();\n      var nextInputValue = nextState.inputValue;\n\n      if (nextInputValue != this.state.inputValue) {\n        var inputItem = void 0,\n            inputItemEphemeral = void 0,\n            isValid = void 0;\n\n        if (!this._valueWasValidated) {\n          if (nextInputValue) {\n            inputItem = this._listAdapter.findMatching(nextProps.datalist, nextInputValue);\n\n            if (inputItem == null && !nextProps.datalistOnly) {\n              inputItem = this._itemAdapter.newFromValue(nextInputValue);\n              inputItemEphemeral = true;\n              isValid = true;\n            } else {\n              inputItemEphemeral = false;\n              isValid = inputItem != null;\n            }\n          } else {\n            inputItem = null;\n            inputItemEphemeral = false;\n            isValid = !nextProps.required;\n          }\n\n          this._setValueMeta(inputItem, inputItemEphemeral, isValid);\n        } else {\n          inputItem = this._inputItem;\n          isValid = this._valueIsValid;\n        }\n\n        if (isValid) {\n          this._lastValidItem = inputItem;\n          this._lastValidValue = inputItem && !inputItemEphemeral ? this._itemAdapter.getInputValue(inputItem) : nextInputValue;\n        }\n\n        if (isValid) {\n          var _multiple = nextProps.multiple,\n              _onChange = nextProps.onChange;\n\n          if (!_multiple && _onChange) {\n            var _value2 = this._getValueUsing(nextProps, nextInputValue, inputItem, nextState.selectedItems);\n\n            if (_value2 !== this._lastOnChangeValue) {\n              this._lastOnChangeValue = _value2;\n\n              _onChange(_value2);\n            }\n          }\n\n          var _onSelect = nextProps.onSelect;\n\n          if (_onSelect && inputItem !== this._lastOnSelectValue) {\n            this._lastOnSelectValue = inputItem;\n\n            _onSelect(inputItem);\n          }\n        }\n      }\n\n      var onToggle = nextProps.onToggle;\n\n      if (onToggle && nextState.open != this.state.open) {\n        onToggle(nextState.open);\n      }\n    }\n  }, {\n    key: 'componentDidUpdate',\n    value: function componentDidUpdate(prevProps, prevState) {\n      if (this.state.open && !prevState.open && this._lastOpenEventType === 'keydown' || this.state.disableFilter && !prevState.disableFilter && this._menuFocusedBeforeUpdate) {\n        this.refs.suggestions.focusFirst();\n      } else if (!this.state.open && prevState.open) {\n        // closed\n        if (this._menuFocusedBeforeUpdate) {\n          this._menuFocusedBeforeUpdate = false;\n\n          this._focusInput();\n        }\n      }\n    }\n  }, {\n    key: 'componentWillUnmount',\n    value: function componentWillUnmount() {\n      clearTimeout(this._focusTimeoutId);\n      this._focusTimeoutId = null;\n      clearTimeout(this._searchTimeoutId);\n      this._searchTimeoutId = null;\n    }\n  }, {\n    key: '_focusInput',\n    value: function _focusInput() {\n      var input = _reactDom2['default'].findDOMNode(this.refs.input); // istanbul ignore else\n\n\n      if (input instanceof HTMLElement) {\n        input.focus();\n      }\n    }\n  }, {\n    key: '_open',\n    value: function _open(eventType, props) {\n      this._lastOpenEventType = eventType;\n\n      var disableFilter = eventType !== 'autocomplete' && this._hasNoOrExactMatch(props);\n\n      this.setState({\n        open: true,\n        disableFilter: disableFilter\n      });\n      var onSearch = props.onSearch;\n      var _state = this.state,\n          inputValue = _state.inputValue,\n          searchValue = _state.searchValue;\n\n      if (onSearch && searchValue !== inputValue) {\n        this.setState({\n          searchValue: inputValue\n        });\n        onSearch(inputValue);\n      }\n    }\n  }, {\n    key: '_close',\n    value: function _close() {\n      this.setState({\n        open: false\n      });\n    }\n  }, {\n    key: '_toggleOpen',\n    value: function _toggleOpen(eventType, props) {\n      if (this.state.open) {\n        this._close();\n      } else {\n        this._open(eventType, props);\n      }\n    }\n  }, {\n    key: '_canOpen',\n    value: function _canOpen() {\n      var datalist = this.props.datalist;\n      return datalist == null && this.props.onSearch || !this._listAdapter.isEmpty(datalist) || !!this.props.datalistMessage;\n    }\n  }, {\n    key: '_hasNoOrExactMatch',\n    value: function _hasNoOrExactMatch(props) {\n      var _this2 = this;\n\n      if (this._inputItem != null && !this._inputItemEphemeral) {\n        return true; // exact match\n      }\n\n      var foldedValue = this._itemAdapter.foldValue(this.state.inputValue);\n\n      return this._listAdapter.find(props.datalist, function (item) {\n        return _this2._itemAdapter.itemIncludedByInput(item, foldedValue);\n      }) == null;\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var showToggle = this.props.showToggle;\n\n      var toggleCanOpen = this._canOpen();\n\n      var toggleVisible = showToggle === 'auto' ? toggleCanOpen : showToggle;\n      var classes = {\n        autosuggest: true,\n        open: this.state.open,\n        disabled: this.props.disabled,\n        dropdown: toggleVisible && !this.props.dropup,\n        dropup: toggleVisible && this.props.dropup\n      };\n      return _react2['default'].createElement('div', {\n        key: 'dropdown',\n        className: (0, _classnames2['default'])(classes),\n        onFocus: this._handleFocus,\n        onBlur: this._handleBlur\n      }, this._renderInputGroup(toggleVisible, toggleCanOpen), this._renderMenu());\n    }\n  }, {\n    key: '_renderInputGroup',\n    value: function _renderInputGroup(toggleVisible, toggleCanOpen) {\n      var addonBefore = this.props.addonBefore ? _react2['default'].createElement('span', {\n        className: 'input-group-addon',\n        key: 'addonBefore'\n      }, this.props.addonBefore) : null;\n      var addonAfter = this.props.addonAfter ? _react2['default'].createElement('span', {\n        className: 'input-group-addon',\n        key: 'addonAfter'\n      }, this.props.addonAfter) : null;\n      var buttonBefore = this.props.buttonBefore ? _react2['default'].createElement('span', {\n        className: 'input-group-btn'\n      }, this.props.buttonBefore) : null; // Bootstrap expects the dropdown toggle to be last,\n      // as it does not reset the right border radius for toggles:\n      // .input-group-btn:last-child > .btn:not(:last-child):not(.dropdown-toggle)\n      // { @include border-right-radius(0); }\n\n      var toggle = toggleVisible && this._renderToggle(toggleCanOpen);\n\n      var buttonAfter = toggle || this.props.buttonAfter ? _react2['default'].createElement('span', {\n        className: 'input-group-btn'\n      }, this.props.buttonAfter, toggle) : null;\n      var classes = (0, _classnames2['default'])({\n        'input-group': addonBefore || addonAfter || buttonBefore || buttonAfter,\n        'input-group-sm': this.props.bsSize === 'small',\n        'input-group-lg': this.props.bsSize === 'large',\n        'input-group-toggle': !!toggle\n      });\n      return classes ? _react2['default'].createElement('div', {\n        className: classes,\n        key: 'input-group'\n      }, addonBefore, buttonBefore, this._renderChoices(), addonAfter, buttonAfter) : this._renderChoices();\n    }\n  }, {\n    key: '_renderToggle',\n    value: function _renderToggle(canOpen) {\n      return _react2['default'].createElement(_reactBootstrap.Dropdown.Toggle, {\n        ref: 'toggle',\n        key: 'toggle',\n        id: this.props.toggleId,\n        bsSize: this.props.bsSize,\n        disabled: this.props.disabled || !canOpen,\n        open: this.state.open,\n        onClick: this._handleToggleClick,\n        onKeyDown: this._handleKeyDown\n      });\n    }\n  }, {\n    key: '_renderChoices',\n    value: function _renderChoices() {\n      if (this.props.multiple) {\n        var _props$choicesClass = this.props.choicesClass,\n            ChoicesClass = _props$choicesClass === undefined ? _Choices2['default'] : _props$choicesClass;\n        return _react2['default'].createElement(ChoicesClass, {\n          ref: 'choices',\n          autoHeight: !this.props.showToggle && !this.props.addonAfter && !this.props.addonBefore && !this.props.buttonAfter && !this.props.buttonBefore,\n          disabled: this.props.disabled,\n          focused: this.state.inputFocused,\n          inputValue: this.state.inputValue,\n          items: this.state.selectedItems,\n          onKeyPress: this._handleKeyPress,\n          onRemove: this._removeItem,\n          renderItem: this._renderSelected\n        }, this._renderInput());\n      }\n\n      return this._renderInput();\n    } // autobind\n\n  }, {\n    key: '_renderSelected',\n    value: function _renderSelected(item) {\n      return this._itemAdapter.renderSelected(item);\n    }\n  }, {\n    key: '_renderInput',\n    value: function _renderInput() {\n      var formGroup = this.context.$bs_formGroup;\n      var controlId = formGroup && formGroup.controlId;\n      var extraProps = {};\n      var _iteratorNormalCompletion2 = true;\n      var _didIteratorError2 = false;\n      var _iteratorError2 = undefined;\n\n      try {\n        for (var _iterator2 = Object.keys(this.props)[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n          var key = _step2.value;\n\n          if (!Autosuggest.propTypes[key]) {\n            extraProps[key] = this.props[key];\n          }\n        }\n      } catch (err) {\n        _didIteratorError2 = true;\n        _iteratorError2 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion2 && _iterator2['return']) {\n            _iterator2['return']();\n          }\n        } finally {\n          if (_didIteratorError2) {\n            throw _iteratorError2;\n          }\n        }\n      }\n\n      var noneSelected = !this.props.multiple || !this.state.selectedItems.length; // set autoComplete off to avoid a redundant browser drop-down menu,\n      // but allow it to be overridden by extra props for auto-fill purposes\n\n      return _react2['default'].createElement('input', _extends({\n        autoComplete: 'off'\n      }, extraProps, {\n        className: (0, _classnames2['default'])(this.props.className, {\n          'form-control': !this.props.multiple\n        }),\n        ref: 'input',\n        key: 'input',\n        id: controlId,\n        disabled: this.props.disabled,\n        required: this.props.required && noneSelected,\n        placeholder: noneSelected ? this.props.placeholder : undefined,\n        type: this.props.type,\n        value: this.state.inputValue,\n        onChange: this._handleInputChange,\n        onKeyDown: this._handleKeyDown,\n        onKeyPress: this._handleKeyPress,\n        onFocus: this._handleInputFocus,\n        onBlur: this._handleInputBlur\n      }));\n    }\n  }, {\n    key: '_renderMenu',\n    value: function _renderMenu() {\n      var _this3 = this;\n\n      this._pseudofocusedItem = null;\n      var open = this.state.open;\n\n      if (!open) {\n        return null;\n      }\n\n      var datalist = this.props.datalist;\n\n      var foldedValue = this._itemAdapter.foldValue(this.state.inputValue);\n\n      this._foldedInputValue = foldedValue;\n      var items = void 0;\n\n      if (this.state.disableFilter) {\n        items = this._listAdapter.toArray(datalist);\n      } else {\n        items = this._listAdapter.filter(datalist, function (item) {\n          return _this3._itemAdapter.itemIncludedByInput(item, foldedValue) && _this3._allowItem(item);\n        });\n      }\n\n      items = this._itemAdapter.sortItems(items, foldedValue);\n\n      var filtered = items.length < this._listAdapter.getLength(datalist); // visually indicate that first item will be selected if Enter is pressed\n      // while the input element is focused (unless multiple and not datalist-only)\n\n\n      var focusedIndex = void 0;\n\n      if (items.length > 0 && this.state.inputFocused && (!this.props.multiple || this.props.datalistOnly)) {\n        this._pseudofocusedItem = items[focusedIndex = 0];\n      }\n\n      var _props = this.props,\n          _props$suggestionsCla = _props.suggestionsClass,\n          SuggestionsClass = _props$suggestionsCla === undefined ? _Suggestions2['default'] : _props$suggestionsCla,\n          datalistMessage = _props.datalistMessage,\n          onDatalistMessageSelect = _props.onDatalistMessageSelect,\n          toggleId = _props.toggleId;\n      return _react2['default'].createElement(SuggestionsClass, {\n        ref: 'suggestions',\n        datalistMessage: datalistMessage,\n        filtered: filtered,\n        focusedIndex: focusedIndex,\n        getItemKey: this._getItemKey,\n        isSelectedItem: this._isSelectedItem,\n        items: items,\n        labelledBy: toggleId,\n        onClose: this._handleMenuClose,\n        onDatalistMessageSelect: onDatalistMessageSelect,\n        onDisableFilter: this._handleShowAll,\n        onSelect: this._handleItemSelect,\n        open: open,\n        renderItem: this._renderSuggested\n      });\n    }\n  }, {\n    key: '_allowItem',\n    value: function _allowItem(item) {\n      var _this4 = this;\n\n      if (this.props.allowDuplicates) {\n        return true;\n      }\n\n      var value = this._itemAdapter.getInputValue(item);\n\n      return !this.state.selectedItems.find(function (i) {\n        return _this4._itemAdapter.getInputValue(i) === value;\n      });\n    } // autobind\n\n  }, {\n    key: '_getItemKey',\n    value: function _getItemKey(item) {\n      return this._itemAdapter.getReactKey(item);\n    } // autobind\n\n  }, {\n    key: '_isSelectedItem',\n    value: function _isSelectedItem(item) {\n      return this._itemAdapter.itemMatchesInput(item, this._foldedInputValue);\n    } // autobind\n\n  }, {\n    key: '_renderSuggested',\n    value: function _renderSuggested(item) {\n      return this._itemAdapter.renderSuggested(item);\n    } // autobind\n\n  }, {\n    key: '_handleToggleClick',\n    value: function _handleToggleClick() {\n      this._toggleOpen('click', this.props);\n    } // autobind\n\n  }, {\n    key: '_handleInputChange',\n    value: function _handleInputChange(event) {\n      var _this5 = this;\n\n      var _ref2 = event.target,\n          value = _ref2.value; // prevent auto-complete on backspace/delete/copy/paste/etc.\n\n      var allowAutoComplete = this._keyPressCount > this.state.inputValueKeyPress;\n\n      if (allowAutoComplete && value) {\n        if (this._autoCompleteAfterRender) {\n          this._setValueMeta();\n\n          this._setInputValue(value, function () {\n            _this5._checkAutoComplete(value, _this5.props);\n          });\n        } else if (!this._checkAutoComplete(value, this.props)) {\n          this._setValueMeta();\n\n          this._setInputValue(value);\n        }\n      } else {\n        this._setValueMeta();\n\n        this._setInputValue(value);\n      } // suppress onSearch if can't auto-complete and not open\n\n\n      if (allowAutoComplete || this.state.open) {\n        var _onSearch = this.props.onSearch;\n\n        if (_onSearch) {\n          clearTimeout(this._searchTimeoutId);\n          this._searchTimeoutId = setTimeout(function () {\n            _this5._searchTimeoutId = null;\n\n            if (value != _this5.state.searchValue) {\n              _this5.setState({\n                searchValue: value\n              });\n\n              _onSearch(value);\n            }\n          }, this.props.searchDebounce);\n        }\n      }\n    }\n  }, {\n    key: '_checkAutoComplete',\n    value: function _checkAutoComplete(value, props) {\n      var _this6 = this; // open dropdown if any items would be included\n\n\n      var valueUpdated = false;\n      var datalist = props.datalist;\n\n      var foldedValue = this._itemAdapter.foldValue(value);\n\n      var includedItems = this._listAdapter.filter(datalist, function (i) {\n        return _this6._itemAdapter.itemIncludedByInput(i, foldedValue) && _this6._allowItem(i);\n      });\n\n      if (includedItems.length > 0) {\n        // if only one item is included and the value must come from the list,\n        // autocomplete using that item\n        var _datalistOnly = props.datalistOnly,\n            _datalistPartial = props.datalistPartial;\n\n        if (includedItems.length === 1 && _datalistOnly && !_datalistPartial) {\n          var found = includedItems[0];\n\n          var foundValue = this._itemAdapter.getInputValue(found);\n\n          var callback = void 0;\n          var _inputSelect = props.inputSelect;\n\n          if (value != foundValue && _inputSelect && this._itemAdapter.foldValue(foundValue).startsWith(foldedValue)) {\n            var _input = this.refs.input;\n\n            callback = function callback() {\n              _inputSelect(_input, value, foundValue);\n            };\n          }\n\n          this._setValueMeta(found);\n\n          this._setInputValue(foundValue, callback);\n\n          valueUpdated = true;\n\n          if (this.state.open ? props.closeOnCompletion : value != foundValue && !props.closeOnCompletion) {\n            this._toggleOpen('autocomplete', props);\n          }\n        } else {\n          // otherwise, just check if any values match, and select the first one\n          // (without modifying the input value)\n          var _found = includedItems.find(function (i) {\n            return _this6._itemAdapter.itemMatchesInput(i, foldedValue);\n          });\n\n          if (_found) {\n            this._setValueMeta(_found);\n\n            this._setInputValue(value);\n\n            valueUpdated = true;\n          } // open dropdown unless exactly one matching value was found\n\n\n          if (!this.state.open && (!_found || includedItems.length > 1)) {\n            this._open('autocomplete', props);\n          }\n        }\n      }\n\n      return valueUpdated;\n    } // autobind\n\n  }, {\n    key: '_handleItemSelect',\n    value: function _handleItemSelect(item) {\n      if (this.props.multiple) {\n        this._addItem(item);\n      } else {\n        var itemValue = this._itemAdapter.getInputValue(item);\n\n        this._setValueMeta(item);\n\n        this._setInputValue(itemValue);\n      }\n\n      this._close();\n    }\n  }, {\n    key: '_addItem',\n    value: function _addItem(item) {\n      if (this._allowItem(item)) {\n        var _selectedItems3 = [].concat(_toConsumableArray(this.state.selectedItems), [item]);\n\n        this.setState({\n          selectedItems: _selectedItems3\n        });\n        var _props2 = this.props,\n            _onAdd = _props2.onAdd,\n            _onChange2 = _props2.onChange;\n\n        if (_onAdd) {\n          _onAdd(item);\n        }\n\n        if (_onChange2) {\n          _onChange2(_selectedItems3);\n        }\n      }\n\n      this._clearInput();\n\n      if (this.state.open) {\n        this._close();\n      }\n    } // autobind\n\n  }, {\n    key: '_removeItem',\n    value: function _removeItem(index) {\n      var previousItems = this.state.selectedItems;\n      var selectedItems = previousItems.slice(0, index).concat(previousItems.slice(index + 1));\n      this.setState({\n        selectedItems: selectedItems\n      });\n      var _props3 = this.props,\n          onRemove = _props3.onRemove,\n          onChange = _props3.onChange;\n\n      if (onRemove) {\n        onRemove(index);\n      }\n\n      if (onChange) {\n        onChange(selectedItems);\n      }\n    }\n  }, {\n    key: '_addInputValue',\n    value: function _addInputValue() {\n      if (this._inputItem) {\n        this._addItem(this._inputItem);\n\n        return true;\n      }\n\n      return false;\n    } // autobind\n\n  }, {\n    key: '_handleShowAll',\n    value: function _handleShowAll() {\n      this.setState({\n        disableFilter: true\n      });\n    } // autobind\n\n  }, {\n    key: '_handleKeyDown',\n    value: function _handleKeyDown(event) {\n      if (this.props.disabled) return;\n\n      switch (event.keyCode || event.which) {\n        case _keycode2['default'].codes.down:\n        case _keycode2['default'].codes['page down']:\n          if (this.state.open) {\n            this.refs.suggestions.focusFirst();\n          } else if (this._canOpen()) {\n            this._open('keydown', this.props);\n          }\n\n          event.preventDefault();\n          break;\n\n        case _keycode2['default'].codes.left:\n        case _keycode2['default'].codes.backspace:\n          if (this.refs.choices && this.refs.input && this._getCursorPosition(this.refs.input) === 0) {\n            this.refs.choices.focusLast();\n            event.preventDefault();\n          }\n\n          break;\n\n        case _keycode2['default'].codes.right:\n          if (this.refs.choices && this.refs.input && this._getCursorPosition(this.refs.input) === this.state.inputValue.length) {\n            this.refs.choices.focusFirst();\n            event.preventDefault();\n          }\n\n          break;\n\n        case _keycode2['default'].codes.enter:\n          if (this.props.multiple && this.state.inputValue) {\n            event.preventDefault();\n\n            if (this._addInputValue()) {\n              break;\n            }\n          }\n\n          if (this.state.open && this.state.inputFocused) {\n            event.preventDefault();\n\n            if (this._pseudofocusedItem) {\n              this._handleItemSelect(this._pseudofocusedItem);\n            } else {\n              this._close();\n            }\n          }\n\n          break;\n\n        case _keycode2['default'].codes.esc:\n        case _keycode2['default'].codes.tab:\n          this._handleMenuClose(event);\n\n          break;\n      }\n    }\n  }, {\n    key: '_getCursorPosition',\n    value: function _getCursorPosition(input) {\n      var inputNode = _reactDom2['default'].findDOMNode(input); // istanbul ignore else\n\n\n      if (inputNode instanceof HTMLInputElement) {\n        return inputNode.selectionStart;\n      }\n    } // autobind\n\n  }, {\n    key: '_handleKeyPress',\n    value: function _handleKeyPress() {\n      ++this._keyPressCount;\n    } // autobind\n\n  }, {\n    key: '_handleMenuClose',\n    value: function _handleMenuClose() {\n      if (this.state.open) {\n        this._close();\n      }\n    } // autobind\n\n  }, {\n    key: '_handleInputFocus',\n    value: function _handleInputFocus() {\n      this.setState({\n        inputFocused: true\n      });\n    } // autobind\n\n  }, {\n    key: '_handleInputBlur',\n    value: function _handleInputBlur() {\n      this.setState({\n        inputFocused: false\n      });\n    } // autobind\n\n  }, {\n    key: '_handleFocus',\n    value: function _handleFocus() {\n      if (this._focusTimeoutId) {\n        clearTimeout(this._focusTimeoutId);\n        this._focusTimeoutId = null;\n      } else {\n        this._focused = true;\n        var _onFocus = this.props.onFocus;\n\n        if (_onFocus) {\n          var _value3 = this._getCurrentValue();\n\n          _onFocus(_value3);\n        }\n      }\n    } // autobind\n\n  }, {\n    key: '_handleBlur',\n    value: function _handleBlur() {\n      var _this7 = this;\n\n      this._focusTimeoutId = setTimeout(function () {\n        _this7._focusTimeoutId = null;\n        _this7._focused = false;\n        var inputValue = _this7.state.inputValue;\n        var onBlur = _this7.props.onBlur;\n\n        if (_this7.props.multiple) {\n          if (inputValue && !_this7._addInputValue()) {\n            _this7._clearInput();\n          }\n        } else if (inputValue != _this7._lastValidValue) {\n          // invoke onBlur after state change, rather than immediately\n          var callback = void 0;\n\n          if (onBlur) {\n            callback = function callback() {\n              var value = _this7._getCurrentValue();\n\n              onBlur(value);\n            };\n          } // restore last valid value/item\n\n\n          _this7._setValueMeta(_this7._lastValidItem, false, true, true);\n\n          _this7._setInputValue(_this7._lastValidValue, callback);\n\n          return;\n        }\n\n        if (onBlur) {\n          var _value4 = _this7._getCurrentValue();\n\n          onBlur(_value4);\n        }\n      }, 1);\n    }\n  }]);\n\n  return Autosuggest;\n}(_react2['default'].Component);\n\nAutosuggest.propTypes = {\n  /**\n   * Text or component appearing in the input group after the input element\n   * (and before any button specified in `buttonAfter`).\n   */\n  addonAfter: _propTypes2['default'].node,\n\n  /**\n    * Text or component appearing in the input group before the input element\n    * (and before any button specified in `buttonBefore`).\n    */\n  addonBefore: _propTypes2['default'].node,\n\n  /**\n   * Indicates whether duplicate values are allowed in `multiple` mode.\n   */\n  allowDuplicates: _propTypes2['default'].bool,\n\n  /**\n   * Specifies the size of the form group and its contained components.\n   * Leave undefined for normal/medium size.\n   */\n  bsSize: _propTypes2['default'].oneOf(['small', 'large']),\n\n  /**\n   * Button component appearing in the input group after the input element\n   * (and after any add-on specified in `addonAfter`).\n   */\n  buttonAfter: _propTypes2['default'].node,\n\n  /**\n   * Button component appearing in the input group before the input element\n   * (and after any add-on specified in `addonBefore`).\n   */\n  buttonBefore: _propTypes2['default'].node,\n\n  /**\n   * React component class used to render the selected items in multiple mode.\n   */\n  choicesClass: _propTypes2['default'].oneOfType([_propTypes2['default'].func, _propTypes2['default'].string]),\n\n  /**\n   * Indicates whether the drop-down menu should be closed automatically when\n   * auto-completion occurs. By default, the menu will remain open, so the\n   * user can see any additional information about the selected item (such as\n   * a shorthand code that caused it to be selected).\n   */\n  closeOnCompletion: _propTypes2['default'].bool,\n\n  /**\n   * A collection of items (such as an array, object, or Map) used as\n   * auto-complete suggestions. Each item may have any type supported by the\n   * `itemAdapter`. The default item adapter has basic support for any\n   * non-null type: it will initially try to access item properties using the\n   * configured property names (`itemReactKeyPropName`, `itemSortKeyPropName`,\n   * and `itemValuePropName`), but will fall back to using the `toString`\n   * method to obtain these properties to support primitives and other object\n   * types.\n   *\n   * If `datalist` is undefined or null and `onSearch` is not, the datalist\n   * is assumed to be dynamically populated, and the drop-down toggle will be\n   * enabled and will trigger `onSearch` the first time it is clicked.\n   * Conversely, an empty `datalist` or undefined/null `onSearch` indicates\n   * that there are no auto-complete options.\n   */\n  datalist: _propTypes2['default'].any,\n\n  /**\n   * An instance of the ListAdapter class that provides datalist access\n   * methods required by this component.\n   */\n  datalistAdapter: _propTypes2['default'].object,\n\n  /**\n   * Message to be displayed at the end of the datalist. It can be used to\n   * indicate that data is being fetched asynchronously, that an error\n   * occurred fetching data, or that additional options can be requested.\n   * It behaves similarly to a menu item, except that it is not filtered or\n   * sorted and cannot be selected (except to invoke `onDatalistMessageSelect`).\n   * Changing this property to a different non-null value while the component\n   * is focused causes the drop-down menu to be opened, which is useful for\n   * reporting status, such as that options are being fetched or failed to be\n   * fetched.\n   */\n  datalistMessage: _propTypes2['default'].node,\n\n  /**\n   * Indicates that only values matching an item from the `datalist` property\n   * are considered valid. For search purposes, intermediate values of the\n   * underlying `input` element may not match while the component is focused,\n   * but any non-matching value will be replaced with the previous matching\n   * value when the component loses focus.\n   *\n   * Note that there are two cases where the current (valid) value may not\n   * correspond to an item in the datalist:\n   *\n   * - If the value was provided by the `value` or `defaultValue` property\n   *   and either `datalist` is undefined/null (as opposed to empty) or\n   *   `datalistPartial` is true, the value is assumed to be valid.\n   * - If `datalist` changes and `datalistPartial` is true, any previously\n   *   valid value is assumed to remain valid. (Conversely, if `datalist`\n   *   changes and `datalistPartial` is false, a previously valid value will\n   *   be invalidated if not in the new `datalist`.)\n   */\n  datalistOnly: _propTypes2['default'].bool,\n\n  /**\n   * Indicates that the `datalist` property should be considered incomplete\n   * for validation purposes. Specifically, if both `datalistPartial` and\n   * `datalistOnly` are true, changes to the `datalist` will not render\n   * invalid a value that was previously valid. This is useful in cases where\n   * a partial datalist is obtained dynamically in response to the `onSearch`\n   * callback.\n   */\n  datalistPartial: _propTypes2['default'].bool,\n\n  /**\n   * Initial value to be rendered when used as an\n   * [uncontrolled component](https://facebook.github.io/react/docs/forms.html#uncontrolled-components)\n   * (i.e. no `value` property is supplied).\n   */\n  defaultValue: _propTypes2['default'].any,\n\n  /**\n   * Indicates whether the form group is disabled, which causes all of its\n   * contained elements to ignore input and focus events and to be displayed\n   * grayed out.\n   */\n  disabled: _propTypes2['default'].bool,\n\n  /**\n   * Indicates whether the suggestion list should drop up instead of down.\n   *\n   * Note that currently a drop-up list extending past the top of the page is\n   * clipped, rendering the clipped items inaccessible, whereas a drop-down\n   * list will extend the page and allow scrolling as necessary.\n   */\n  dropup: _propTypes2['default'].bool,\n\n  /**\n   * Custom class name applied to the input group.\n   */\n  groupClassName: _propTypes2['default'].string,\n\n  /**\n   * Function used to select a portion of the input value when auto-completion\n   * occurs. The default implementation selects just the auto-completed\n   * portion, which is equivalent to:\n   *\n   * ```js\n   *   defaultInputSelect(input, value, completion) {\n   *     input.setSelectionRange(value.length, completion.length)\n   *   }\n   * ```\n   */\n  inputSelect: _propTypes2['default'].func,\n\n  /**\n   * An instance of the ItemAdapter class that provides the item access\n   * methods required by this component.\n   */\n  itemAdapter: _propTypes2['default'].object,\n\n  /**\n   * Name of the item property used for the React component key. If this\n   * property is not defined, `itemValuePropName` is used instead. If neither\n   * property is defined, `toString()` is called on the item.\n   */\n  itemReactKeyPropName: _propTypes2['default'].string,\n\n  /**\n   * Name of the item property used for sorting items. If this property is not\n   * defined, `itemValuePropName` is used instead. If neither property is\n   * defined, `toString()` is called on the item.\n   */\n  itemSortKeyPropName: _propTypes2['default'].string,\n\n  /**\n   * Name of item property used for the input element value. If this property\n   * is not defined, `toString()` is called on the item.\n   */\n  itemValuePropName: _propTypes2['default'].string,\n\n  /**\n   * Enables selection of multiple items. The value property should be an\n   * array of items.\n   */\n  multiple: _propTypes2['default'].bool,\n\n  /**\n   * Callback function called whenever a new value should be appended to the\n   * array of values in `multiple` mode. The sole argument is the added item.\n   */\n  onAdd: _propTypes2['default'].func,\n\n  /**\n   * Callback function called whenever the input focus leaves this component.\n   * The sole argument is current value (see `onChange for details`).\n   */\n  onBlur: _propTypes2['default'].func,\n\n  /**\n   * Callback function called whenever the input value changes to a different\n   * valid value. Validity depends on properties such as `datalistOnly`,\n   * `valueIsItem`, and `required`. The sole argument is current value:\n   *\n   * - If `multiple` is enabled, the current value is an array of selected\n   *   items.\n   * - If `valueIsItem` is enabled, the current value is the selected\n   *   datalist item.\n   * - Otherwise, the current value is the `input` element value. Note that\n   *   if `datalistOnly` or `required` are enabled, only valid values trigger\n   *   a callback.\n   */\n  onChange: _propTypes2['default'].func,\n\n  /**\n   * Callback function called whenever the datalist item created for\n   * `datalistMessage` is selected. If this property is null, the associated\n   * item is displayed as disabled.\n   */\n  onDatalistMessageSelect: _propTypes2['default'].func,\n\n  /**\n   * Callback function called whenever the input focus enters this component.\n   * The sole argument is current value (see `onChange for details`).\n   */\n  onFocus: _propTypes2['default'].func,\n\n  /**\n   * Callback function called whenever a value should be removed from the\n   * array of values in `multiple` mode. The sole argument is the index of\n   * the value to remove.\n   */\n  onRemove: _propTypes2['default'].func,\n\n  /**\n   * Callback function called periodically when the `input` element value has\n   * changed. The sole argument is the current value of the `input` element.\n   * This callback can be used to dynamically populate the `datalist` based on\n   * the input value so far, e.g. with values obtained from a remote service.\n   * Once changed, the value must then remain unchanged for `searchDebounce`\n   * milliseconds before the function will be called. No two consecutive\n   * invocations of the function will be passed the same value (i.e. changing\n   * and then restoring the value within the debounce interval is not\n   * considered a change). Note also that the callback can be invoked with an\n   * empty string, if the user clears the `input` element; this implies that\n   * any minimum search string length should be imposed by the function.\n   */\n  onSearch: _propTypes2['default'].func,\n\n  /**\n   * Callback function called whenever an item from the suggestion list is\n   * selected (regardless of whether it is clicked or typed). The sole\n   * argument is the selected item.\n   */\n  onSelect: _propTypes2['default'].func,\n\n  /**\n   * Callback function called whenever the drop-down list of suggestions is\n   * opened or closed. The sole argument is a boolean value indicating whether\n   * the list is open.\n   */\n  onToggle: _propTypes2['default'].func,\n\n  /**\n   * Placeholder text propagated to the underlying `input` element (when\n   * `multiple` is false or no items have been selected).\n   */\n  placeholder: _propTypes2['default'].string,\n\n  /**\n   * `required` property passed to the `input` element (when `multiple` is\n   * false or no items have been selected).\n   */\n  required: _propTypes2['default'].bool,\n\n  /**\n   * The number of milliseconds that must elapse between the last change to\n   * the `input` element value and a call to `onSearch`. The default is 250.\n   */\n  searchDebounce: _propTypes2['default'].number,\n\n  /**\n   * Indicates whether to show the drop-down toggle. If set to `auto`, the\n   * toggle is shown only when the `datalist` is non-empty or dynamic.\n   */\n  showToggle: _propTypes2['default'].oneOfType([_propTypes2['default'].bool, _propTypes2['default'].oneOf(['auto'])]),\n\n  /**\n   * React component class used to render the drop-down list of suggestions.\n   */\n  suggestionsClass: _propTypes2['default'].oneOfType([_propTypes2['default'].func, _propTypes2['default'].string]),\n\n  /**\n   * ID supplied to the drop-down toggle and used by the drop-down menu to\n   * refer to it.\n   */\n  toggleId: _propTypes2['default'].oneOfType([_propTypes2['default'].string, _propTypes2['default'].number]),\n\n  /**\n   * `type` property supplied to the contained `input` element. Only textual\n   * types should be specified, such as `text`, `search`, `email`, `tel`, or\n   * perhaps `number`. Note that the browser may supply additional UI elements\n   * for some types (e.g. increment/decrement buttons for `number`) that may\n   * need additional styling or may interfere with UI elements supplied by\n   * this component.\n   */\n  type: _propTypes2['default'].string,\n\n  /**\n   * The value to be rendered by the component. If unspecified, the component\n   * behaves like an [uncontrolled component](https://facebook.github.io/react/docs/forms.html#uncontrolled-components).\n   */\n  value: _propTypes2['default'].any,\n\n  /**\n   * Indicates that the `value` property should be interpreted as a datalist\n   * item, as opposed to the string value of the underlying `input` element.\n   * When false (the default), the `value` property (if specified) is\n   * expected to be a string and corresponds (indirectly) to the `value`\n   * property of the underlying `input` element. When true, the `value`\n   * property is expected to be a datalist item whose display value (as\n   * provided by the `itemAdapter`) is used as the `input` element value.\n   * This property also determines whether the argument to the `onChange`\n   * callback is the `input` value or a datalist item.\n   *\n   * Note that unless `datalistOnly` is also true, items may also be created\n   * dynamically using the `newFromValue` method of the `itemAdapter`.\n   *\n   * Also note that this property is ignored if `multiple` is true; in that\n   * case, the `value` property and `onChange` callback argument are\n   * implicitly an array of datalist items.\n   */\n  valueIsItem: _propTypes2['default'].bool\n};\nAutosuggest.contextTypes = {\n  $bs_formGroup: _propTypes2['default'].object\n};\nAutosuggest.defaultProps = {\n  closeOnCompletion: false,\n  datalistOnly: false,\n  datalistPartial: false,\n  disabled: false,\n  dropup: false,\n  inputSelect: Autosuggest.defaultInputSelect,\n  multiple: false,\n  itemReactKeyPropName: 'key',\n  itemSortKeyPropName: 'sortKey',\n  itemValuePropName: 'value',\n  searchDebounce: 250,\n  showToggle: 'auto',\n  type: 'text',\n  valueIsItem: false\n};\nexports['default'] = Autosuggest;","map":null,"metadata":{},"sourceType":"script"}