{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction toStringOrNumber(v) {\n  return typeof v === 'number' ? v : v.toString();\n}\n\nvar ItemAdapter = function () {\n  function ItemAdapter() {\n    _classCallCheck(this, ItemAdapter);\n  }\n\n  _createClass(ItemAdapter, [{\n    key: 'receiveProps',\n    value: function receiveProps(props) {\n      this.props = props;\n    }\n  }, {\n    key: 'getReactKey',\n    value: function getReactKey(item) {\n      var propName = this.props.itemReactKeyPropName;\n\n      if (propName) {\n        var value = item[propName];\n\n        if (value != null) {\n          return value;\n        }\n      }\n\n      return toStringOrNumber(this.getRawValue(item));\n    }\n  }, {\n    key: 'getSortKey',\n    value: function getSortKey(item) {\n      var propName = this.props.itemSortKeyPropName;\n\n      if (propName) {\n        var value = item[propName];\n\n        if (value != null) {\n          return value;\n        }\n      }\n\n      return toStringOrNumber(this.getRawValue(item));\n    }\n  }, {\n    key: 'getInputValue',\n    value: function getInputValue(item) {\n      return this.getRawValue(item).toString();\n    } // protected\n\n  }, {\n    key: 'getRawValue',\n    value: function getRawValue(item) {\n      var propName = this.props.itemValuePropName;\n\n      if (propName) {\n        var value = item[propName];\n\n        if (value != null) {\n          return value;\n        }\n      }\n\n      return item;\n    }\n  }, {\n    key: 'getTextRepresentations',\n    value: function getTextRepresentations(item) {\n      return [this.foldValue(this.getInputValue(item))];\n    }\n  }, {\n    key: 'foldValue',\n    value: function foldValue(value) {\n      // perform case folding by default; override for diacritic folding, etc.\n      return value.toLowerCase();\n    }\n  }, {\n    key: 'newFromValue',\n    value: function newFromValue(value) {\n      return value;\n    }\n  }, {\n    key: 'itemIncludedByInput',\n    value: function itemIncludedByInput(item, foldedValue) {\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n\n      try {\n        for (var _iterator = this.getTextRepresentations(item)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          var text = _step.value;\n\n          if (text.indexOf(foldedValue) >= 0) {\n            return true;\n          }\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator['return']) {\n            _iterator['return']();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n\n      return false;\n    }\n  }, {\n    key: 'itemMatchesInput',\n    value: function itemMatchesInput(item, foldedValue) {\n      var _iteratorNormalCompletion2 = true;\n      var _didIteratorError2 = false;\n      var _iteratorError2 = undefined;\n\n      try {\n        for (var _iterator2 = this.getTextRepresentations(item)[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n          var text = _step2.value;\n\n          if (text === foldedValue) {\n            return true;\n          }\n        }\n      } catch (err) {\n        _didIteratorError2 = true;\n        _iteratorError2 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion2 && _iterator2['return']) {\n            _iterator2['return']();\n          }\n        } finally {\n          if (_didIteratorError2) {\n            throw _iteratorError2;\n          }\n        }\n      }\n\n      return false;\n    }\n  }, {\n    key: 'sortItems',\n    value: function sortItems(items, foldedValue) {\n      var _this = this;\n\n      items.sort(function (a, b) {\n        return _this.compareItemsWithValue(a, b, foldedValue);\n      });\n      return items;\n    } // protected\n\n  }, {\n    key: 'compareItemsWithValue',\n    value: function compareItemsWithValue(a, b, foldedValue) {\n      // sort matching item(s) before non-matching\n      var aMatches = this.itemMatchesInput(a, foldedValue);\n      var bMatches = this.itemMatchesInput(b, foldedValue);\n\n      if (aMatches != bMatches) {\n        return aMatches ? -1 : 1;\n      } // then sort based on inclusion rank\n\n\n      var aRank = this.itemInclusionRankForInput(a, foldedValue);\n      var bRank = this.itemInclusionRankForInput(b, foldedValue);\n\n      if (aRank != bRank) {\n        return aRank - bRank;\n      } // within same inclusion rank, compare items ignoring value\n\n\n      return this.compareItems(a, b);\n    } // protected\n\n  }, {\n    key: 'itemInclusionRankForInput',\n    value: function itemInclusionRankForInput(item, foldedValue) {\n      var contains = false;\n      var _iteratorNormalCompletion3 = true;\n      var _didIteratorError3 = false;\n      var _iteratorError3 = undefined;\n\n      try {\n        for (var _iterator3 = this.getTextRepresentations(item)[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {\n          var text = _step3.value;\n          var index = text.indexOf(foldedValue);\n\n          if (index === 0) {\n            return 0;\n          }\n\n          if (index > 0) {\n            contains = true;\n          }\n        }\n      } catch (err) {\n        _didIteratorError3 = true;\n        _iteratorError3 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion3 && _iterator3['return']) {\n            _iterator3['return']();\n          }\n        } finally {\n          if (_didIteratorError3) {\n            throw _iteratorError3;\n          }\n        }\n      }\n\n      return contains ? 1 : 2;\n    } // protected\n\n  }, {\n    key: 'compareItems',\n    value: function compareItems(a, b) {\n      var aSortKey = this.getSortKey(a);\n      var bSortKey = this.getSortKey(b);\n      return aSortKey < bSortKey ? -1 : aSortKey == bSortKey ? 0 : 1;\n    } // protected\n\n  }, {\n    key: 'renderItem',\n    value: function renderItem(item) {\n      // default rendering for both dropdown and multiple\n      return this.getInputValue(item);\n    }\n  }, {\n    key: 'renderSuggested',\n    value: function renderSuggested(item) {\n      // dropdown rendering\n      return this.renderItem(item);\n    }\n  }, {\n    key: 'renderSelected',\n    value: function renderSelected(item) {\n      // multiple selected rendering\n      return this.renderItem(item);\n    }\n  }]);\n\n  return ItemAdapter;\n}();\n\nexports['default'] = ItemAdapter;","map":null,"metadata":{},"sourceType":"script"}