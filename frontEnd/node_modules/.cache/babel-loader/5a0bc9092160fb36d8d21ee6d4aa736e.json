{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar _classnames = require('classnames');\n\nvar _classnames2 = _interopRequireDefault(_classnames);\n\nvar _shallowEqual = require('fbjs/lib/shallowEqual');\n\nvar _shallowEqual2 = _interopRequireDefault(_shallowEqual);\n\nvar _keycode = require('keycode');\n\nvar _keycode2 = _interopRequireDefault(_keycode);\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _reactDom = require('react-dom');\n\nvar _reactDom2 = _interopRequireDefault(_reactDom);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    'default': obj\n  };\n}\n\nfunction _toConsumableArray(arr) {\n  if (Array.isArray(arr)) {\n    for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {\n      arr2[i] = arr[i];\n    }\n\n    return arr2;\n  } else {\n    return Array.from(arr);\n  }\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nvar Choices = function (_React$Component) {\n  _inherits(Choices, _React$Component);\n\n  function Choices() {\n    var _ref;\n\n    _classCallCheck(this, Choices);\n\n    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    /* istanbul ignore next: https://github.com/gotwarlost/istanbul/issues/690#issuecomment-265718617 */\n\n\n    var _this = _possibleConstructorReturn(this, (_ref = Choices.__proto__ || Object.getPrototypeOf(Choices)).call.apply(_ref, [this].concat(_toConsumableArray(args))));\n\n    var self = _this; // https://github.com/facebook/flow/issues/1517\n\n    self._handleKeyDown = _this._handleKeyDown.bind(_this);\n    self._handleKeyPress = _this._handleKeyPress.bind(_this);\n    self._handleClose = _this._handleClose.bind(_this);\n    self._handleClick = _this._handleClick.bind(_this);\n    self._focusInput = _this._focusInput.bind(_this);\n    return _this;\n  }\n\n  _createClass(Choices, [{\n    key: 'shouldComponentUpdate',\n    value: function shouldComponentUpdate(nextProps) {\n      return !(0, _shallowEqual2['default'])(this.props, nextProps);\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var _this2 = this;\n\n      var _props = this.props,\n          autoHeight = _props.autoHeight,\n          disabled = _props.disabled,\n          focused = _props.focused,\n          inputValue = _props.inputValue,\n          items = _props.items,\n          renderItem = _props.renderItem,\n          children = _props.children;\n      var hasItems = items.length > 0;\n      var inputStyle = void 0;\n\n      if (hasItems) {\n        // guesstimate input width since inline-block container\n        // won't allow it to expand automatically\n        inputStyle = {\n          width: (inputValue.length + 1) * 0.75 + 'em'\n        };\n      }\n\n      return _react2['default'].createElement('ul', {\n        className: (0, _classnames2['default'])('form-control', 'autosuggest-choices', {\n          focused: focused,\n          'has-items': hasItems,\n          'auto-height': autoHeight\n        }),\n        disabled: disabled,\n        onClick: this._focusInput\n      }, items.map(function (item, index) {\n        return _react2['default'].createElement('li', {\n          key: index,\n          'data-index': index,\n          tabIndex: !disabled ? '-1' : undefined,\n          className: 'autosuggest-choice',\n          onKeyDown: _this2._handleKeyDown,\n          onKeyPress: _this2._handleKeyPress\n        }, _react2['default'].createElement('span', {\n          className: 'autosuggest-choice-close',\n          onClick: _this2._handleClose\n        }), _react2['default'].createElement('span', {\n          className: 'autosuggest-choice-label',\n          onClick: _this2._handleClick\n        }, renderItem(item)));\n      }), _react2['default'].createElement('li', {\n        className: 'autosuggest-input-choice',\n        style: inputStyle\n      }, children));\n    } // autobind\n\n  }, {\n    key: '_handleKeyDown',\n    value: function _handleKeyDown(event) {\n      switch (event.keyCode) {\n        case _keycode2['default'].codes.left:\n          this._focusPrevious();\n\n          event.preventDefault();\n          break;\n\n        case _keycode2['default'].codes.right:\n          this._focusNext();\n\n          event.preventDefault();\n          break;\n\n        case _keycode2['default'].codes.backspace:\n          this._removeActive(-1);\n\n          event.preventDefault();\n          break;\n\n        case _keycode2['default'].codes['delete']:\n          this._removeActive(0);\n\n          event.preventDefault();\n          break;\n      }\n    } // autobind\n\n  }, {\n    key: '_handleKeyPress',\n    value: function _handleKeyPress(event) {\n      // Chrome and Safari lets the input accept the key, Firefox does not\n      this._focusInput();\n\n      var onKeyPress = this.props.onKeyPress; // istanbul ignore else\n\n      if (onKeyPress) {\n        onKeyPress(event);\n      }\n    } // autobind\n\n  }, {\n    key: '_handleClose',\n    value: function _handleClose(event) {\n      if (!this.props.disabled && event.target instanceof HTMLElement) {\n        var choices = event.target.parentNode; // istanbul ignore else\n\n        if (choices instanceof Element) {\n          var _index = Number(choices.getAttribute('data-index'));\n\n          this._remove(_index);\n        }\n      }\n\n      event.stopPropagation();\n    } // autobind\n\n  }, {\n    key: '_handleClick',\n    value: function _handleClick(event) {\n      event.stopPropagation();\n    }\n  }, {\n    key: 'focusFirst',\n    value: function focusFirst() {\n      var items = this._getFocusableMenuItems(false);\n\n      if (items.length > 0) {\n        items[0].focus();\n      }\n    }\n  }, {\n    key: 'focusLast',\n    value: function focusLast() {\n      var items = this._getFocusableMenuItems(false);\n\n      if (items.length > 0) {\n        items[items.length - 1].focus();\n      }\n    }\n  }, {\n    key: '_focusPrevious',\n    value: function _focusPrevious() {\n      var _getItemsAndActiveInd = this._getItemsAndActiveIndex(true),\n          items = _getItemsAndActiveInd.items,\n          activeIndex = _getItemsAndActiveInd.activeIndex; // istanbul ignore else: currently input handles wrap-around\n\n\n      if (activeIndex > 0) {\n        items[activeIndex - 1].focus();\n      } else if (items.length > 0) {\n        items[items.length - 1].focus();\n      }\n    }\n  }, {\n    key: '_focusNext',\n    value: function _focusNext() {\n      var _getItemsAndActiveInd2 = this._getItemsAndActiveIndex(true),\n          items = _getItemsAndActiveInd2.items,\n          activeIndex = _getItemsAndActiveInd2.activeIndex; // istanbul ignore else: currently input handles wrap-around\n\n\n      if (activeIndex < items.length - 1) {\n        items[activeIndex + 1].focus();\n      } else if (items.length > 0) {\n        items[0].focus();\n      }\n    } // autobind\n\n  }, {\n    key: '_focusInput',\n    value: function _focusInput() {\n      var node = _reactDom2['default'].findDOMNode(this); // istanbul ignore else\n\n\n      if (node instanceof Element) {\n        var input = node.querySelector('input'); // istanbul ignore else\n\n        if (input) {\n          input.focus();\n        }\n      }\n    }\n  }, {\n    key: '_remove',\n    value: function _remove(index) {\n      var onRemove = this.props.onRemove; // istanbul ignore else\n\n      if (onRemove) {\n        onRemove(index);\n      }\n    }\n  }, {\n    key: '_removeActive',\n    value: function _removeActive(focusAdjust) {\n      var _getItemsAndActiveInd3 = this._getItemsAndActiveIndex(false),\n          items = _getItemsAndActiveInd3.items,\n          activeIndex = _getItemsAndActiveInd3.activeIndex; // istanbul ignore else\n\n\n      if (activeIndex >= 0) {\n        var nextIndex = activeIndex + focusAdjust;\n\n        if (nextIndex < 0 || nextIndex >= items.length - 1) {\n          this._focusInput();\n        } else if (focusAdjust != 0) {\n          items[nextIndex].focus();\n        }\n\n        this._remove(activeIndex);\n      }\n    }\n  }, {\n    key: '_getItemsAndActiveIndex',\n    value: function _getItemsAndActiveIndex(includeInput) {\n      var items = this._getFocusableMenuItems(includeInput);\n\n      var activeElement = document.activeElement;\n      var activeIndex = activeElement ? items.indexOf(activeElement) : // istanbul ignore next\n      -1;\n      return {\n        items: items,\n        activeIndex: activeIndex\n      };\n    }\n  }, {\n    key: '_getFocusableMenuItems',\n    value: function _getFocusableMenuItems(includeInput) {\n      var node = _reactDom2['default'].findDOMNode(this); // istanbul ignore else\n\n\n      if (node instanceof Element) {\n        return Array.from(node.querySelectorAll(includeInput ? '[tabIndex=\"-1\"],input' : '[tabIndex=\"-1\"]'));\n      } else {\n        return [];\n      }\n    }\n  }]);\n\n  return Choices;\n}(_react2['default'].Component);\n\nChoices.propTypes = {\n  autoHeight: _propTypes2['default'].bool,\n  disabled: _propTypes2['default'].bool,\n  focused: _propTypes2['default'].bool,\n  inputValue: _propTypes2['default'].string,\n  items: _propTypes2['default'].arrayOf(_propTypes2['default'].any).isRequired,\n  onKeyPress: _propTypes2['default'].func,\n  onRemove: _propTypes2['default'].func,\n  renderItem: _propTypes2['default'].func.isRequired\n};\nexports['default'] = Choices;","map":null,"metadata":{},"sourceType":"script"}